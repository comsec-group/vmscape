#!/bin/env python
import os
import sys
import json

# Partially generated by ChatGPT

SCRIPT_DIR = os.path.realpath(os.path.dirname(__file__))

import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
import matplotlib as mpl

# allow passing a file to import results from
result_file = None
if len(sys.argv) > 1:
    result_file =  sys.argv[1]

# Enable LaTeX text rendering
mpl.rcParams.update(
    {
        # "text.usetex": True,
        "font.family": "serif",
        "axes.labelsize": 10,
        "axes.titlesize": 12,
        "xtick.labelsize": 9,
        "ytick.labelsize": 9,
        "legend.fontsize": 9,
        "axes.linewidth": 0.8,
        "xtick.direction": "in",
        "ytick.direction": "in",
        "grid.linestyle": "--",
        "grid.linewidth": 0.5,
        "pdf.fonttype": 42,
        "pgf.rcfonts": False,  # Do not override LaTeX fonts
    }
)


if result_file:
    with open(result_file, "r") as f:
        for line in f.readlines():
            line = line.replace(", ]", "]")
            data_start = line.find("= ") + 2
            data = json.loads(line[data_start:-1])
            if line.startswith("y_l1_arr = "):
                y_l1_arr = data
            elif line.startswith("y_l2_arr = "):
                y_l2_arr = data
            elif line.startswith("y_l3_arr = "):
                y_l3_arr = data
            elif line.startswith("y_ram_arr = "):
                y_ram_arr = data

else:
    # MANUAL RESULT ENTRY
    y_l1_arr = [4087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
    y_l2_arr = [4096, 4095, 4092, 4081, 4080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
    y_l3_arr = [4096, 4096, 4096, 4096, 4096, 4095, 4096, 4096, 4096, 4096, 4095, 4096, 4096, 91, 99, 97, 105, 105, 86, 9, 8, 6, 4, 8, 6, 9, 4, 39, 16, 20, 4, 7, 4, 8, 6, 8, 3, 7, 4, 8, 7, 3, 5, 14, 10, 6, 5, 9, 8, 9, 4, 6, 8, 7, 10, 3, 4, 6, 10, 9, 11, 9, 6, 4, 7, 8, 3, 2, 5, 2, 4, 5, 2, 10, 5, 3, 5, 3, 8, 4, 2, 2, 4, 6, 4, 2, 3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
    y_ram_arr = [4096, 4096, 4096, 4095, 4096, 4096, 4096, 4096, 4096, 4096, 4093, 4095, 4096, 4096, 4096, 4096, 4096, 4096, 4095, 4096, 4094, 4096, 4096, 4096, 4096, 4093, 4096, 4095, 4095, 4095, 4096, 4093, 4094, 4091, 4095, 4092, 4081, 4083, 4083, 4082, 4096, 4096, 4096, 4095, 4096, 4094, 4096, 4095, 4095, 4096, 4095, 4095, 4096, 4094, 4096, 4096, 4095, 4094, 4096, 4096, 4093, 4092, 4096, 4091, 4073, 4090, 4080, 4057, 4052, 4047, 4040, 4039, 4033, 4028, 4021, 4027, 4028, 4025, 4026, 4027, 4025, 4020, 4018, 4019, 4014, 4020, 4004, 3951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]

y_l1 = sum([x > 3000 for x in y_l1_arr])
y_l2 = sum([x > 3000 for x in y_l2_arr])
y_l3 = sum([x > 3000 for x in y_l3_arr])
y_ram = sum([x > 3000 for x in y_ram_arr])
print(f"L1 Window: {y_l1}")
print(f"L2 Window: {y_l2}")
print(f"LLC Window: {y_l3}")
print(f"RAM Window: {y_ram}")

# Plot
fig, ax = plt.subplots(
    figsize=(3.5, 1.6), layout="constrained"
)  # 3.5 inch for single column

rects = ax.bar([0, 1, 2, 3], [y_l1, y_l2, y_l3, y_ram], color="#202020", fill=True)
ax.bar_label(rects, padding=3)
ax.set_ylim(0, 100)
ax.set_xlabel(r"Cache Level")
ax.set_ylabel(r"Window Size [Loads]")
ax.tick_params(axis="x", which="both", length=0)
ax.set_xticks([0, 1, 2, 3])
ax.set_xticklabels(["L1", "L2", "L3", "RAM"])
ax.yaxis.set_major_formatter(mticker.ScalarFormatter())

# Grid (only major y)
ax.grid(True, which="major", axis="y")

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

fig.savefig(os.path.join(SCRIPT_DIR, "speculation_window_ieee.pdf"))
